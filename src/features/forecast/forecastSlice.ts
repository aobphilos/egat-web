import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';

import type { AppState } from '../../app/store';
import { IForecast, DefaultForecast } from '../../model/forecast';
import { fetchData } from './forecastAPI';

export interface IForecastState {
  data: IForecast;
  status: 'idle' | 'loading' | 'failed';
}

const initialState: IForecastState = {
  data: DefaultForecast,
  status: 'idle',
};

export const getForecastAsync = createAsyncThunk('forecast/fetchData', async (params: any) => {
  const response = await fetchData(params);
  // The value we return becomes the `fulfilled` action payload

  return response.data;
});

export const forecastSlice = createSlice({
  name: 'forecast',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getForecastAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(getForecastAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.data = action.payload;
      });
  },
});

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectForecast = (state: AppState) => state.forecast;

export default forecastSlice.reducer;
