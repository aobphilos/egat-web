import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';

import type { AppState } from '../../app/store';
import { ITotalGeneratedPowers, GENERATED_POWER_STATUS } from '../../model/forecast';
import { IPlant, PLANT_FUEL_TYPE } from '../../model/plant';
import { summaryPowers } from './forecastAPI';

export interface ISummaryState {
  data: ITotalGeneratedPowers;
  status: 'idle' | 'loading' | 'failed';
}

const initialState: ISummaryState = {
  data: {} as ITotalGeneratedPowers,
  status: 'idle',
};

export const getSummaryPowerAsync = createAsyncThunk('forecast/summary', async (plantList: IPlant[]) => {
  console.log('Call Summary Slice: (list) ', plantList.length);

  const sunList = plantList.filter((p) => p.fuelName === PLANT_FUEL_TYPE.SOLAR).map((p) => p.ppInitial);
  const windList = plantList.filter((p) => p.fuelName === PLANT_FUEL_TYPE.WIND).map((p) => p.ppInitial);

  const response = await summaryPowers({ sunList, windList });
  // The value we return becomes the `fulfilled` action payload

  return response.data;
});

export const forecastSummarySlice = createSlice({
  name: 'forecastSummary',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setSummaryPower: (state, action: PayloadAction<ITotalGeneratedPowers>) => {
      state.data = action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getSummaryPowerAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(getSummaryPowerAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.data = action.payload;
      });
  },
});

export const { setSummaryPower } = forecastSummarySlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectForecastSummary = (state: AppState) => state.forecastSummary;

export default forecastSummarySlice.reducer;
