import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';

import type { AppState } from '../../app/store';
import { IPlant } from '../../model/plant';
import { fetchPlant } from './plantAPI';

export interface IPlantState {
  data: IPlant[];
  selected: IPlant | null;
  status: 'idle' | 'loading' | 'failed';
}

const initialState: IPlantState = {
  data: [],
  selected: null,
  status: 'idle',
};

export const getPlantAsync = createAsyncThunk('plant/fetchPlant', async () => {
  const response = await fetchPlant();
  // The value we return becomes the `fulfilled` action payload
  return response.data;
});

export const plantSlice = createSlice({
  name: 'plant',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    // Use the PayloadAction type to declare the contents of `action.payload`
    setSelectedPlant: (state, action: PayloadAction<IPlant>) => {
      state.selected = action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getPlantAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(getPlantAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.data = action.payload;
      });
  },
});

export const { setSelectedPlant } = plantSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectPlants = (state: AppState) => state.plant;

export default plantSlice.reducer;
